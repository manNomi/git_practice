깃 과 깃허브 

** Git 

- 정의: 분산 버전 관리 시스템
-Git 은 로컬시스템이다 


** Github

#git bash

-정의: git 의 기능을 하는 온라인 커뮤니티 / 클라우드 

1. 협업용 툴로 사용 (심화 과정)
2. 개발자의 포트폴리오 


** 깃의 용어

 Repository  (Repo라고부름)

ㄴ 프로젝트 폴더를 의미
ㄴ 현재 진행 중인 프로젝트의 폴더에 ,git 을 설치하면 repo로 인식이 된다 

add(명령어)

ㄴ Stage에 코드 파일을 추가하는 명령어 
- stage 는 개념 
ㄴ 임시저장 공간 (버전으로 만들기 전)
삭제된것이나 수정된것 어디가 바뀐지를 저장 
코드자체를 모두 저장 하는게 아닌. 직전 버전과의 차이점만 저장하기 위해 저장하는 공간 
1.용량 문제 해결
2. 직전 버전 과의 차이점을 눈으로 보여주기 위해 

commit (명령어)

-Stage 의 내용을 버전으로 저장하는 명령어 

**깃허브 용어 

Clone(명령어)

ㄴ원격 Repo에서내 로컬로 다운로드 받아서 로컬 Repo로 만드는 것 
(Github의 내용을 다운받아서 내 컴퓨터에 설치하는 것)

Push ( 명령어 )
ㄴ 로컬 Repo의 버전을 원격 Repo로 업로드 

Pull(명령어)
ㄴ 원격 Repo의 버전을 로컬 Repo로 다운로드 

#clone과 pull의 차이 
전체다 새로 만드는것은 clone 새로운 버전으로 바꾸는건 pull

Fork (명령어)
ㄴ 원격 Repo에서 다른 원격 지점(깃허브)으로 다운로드 받아서 Repo로 만드는 것 (원격=다른 깃허브)
# 포크는 찍어서 어디에 둘지 보는것
#남의 코드가 좋아보여서 포크하면 내깃허브로 받기 

Branch(개념) 가지 

하나의 프로젝트를 가지처럼 쪼개놓는것 
EX) sqlite 마리아db 둘중 어느것을 쓸지 가지처럼 쪼개서 하는것 
여러 방향성을 가진 프로젝트를 만들 수 있다 


#-----------------------------------------------------------------------------------------------------------#
commit 은 기능 하나를 만들거나 수정했을때 마다 commit을 해야한다 
깃허브에서 수정시 풀 안해주면 로컬과 충돌이 나게 된다 
#-----------------------------------------------------------------------------------------------------------#
rm -rf .git/ -> 현재 리포 삭제

git init-> 그 폴더가 Repo 가된다 
그 폴더에 .git 이라는 숨김 풀더가 생김 

git add ./*  -> 현재 폴더의 모든것을 add 하겠다 

git config user.name "manNomi"  -> 내가 누군지를 밝히는 것 
git config user.email "hanmw110@naver.com" -> 마찬가지 이메일

git config --list  -> config 확인 

프로젝트당 처음에만 해주면 된다 

git commit -m "First Commit"  -> 메모형식으로 적겠다 저장 나중에 확인용으로 중요하므로 세세하게 적자

git remote add origin (링크)- 괄호 제외	
(한번만 해주면 됨 깃허브와 연결 하는것 ) origin ->원격접속 경로 
->링크의 경우 깃허브 페이지에서 리포 만들고 거기서 복사해서 하면된다

git remote -v ->remote가 정상적인지 확인

git remote remove origin -> origin 삭제

git push -f origin master  - force push 

git clone 주소   ->  origin 포함해서 가져옴 

git push origin master 
master -> branch 이름

cd 파일 
git add 
git commit 
git push origin 
순서로 해준다

#-----------------------------------------------------------------------------------------------------------#
git branch -a
-클론 받은경우 숨겨진 브랜치 확인 

git clone -b 
-클론 받았을때 숨겨진 브랜치 가져옴 
(git clone -b <branch> <repository>)

git 

git remote add origin (https://github.com/manNomi/manNomi.git)

git remote add origin (https://github.com/manNomi/db.git)

git remote add origin https://github.com/manNomi/coffeKiosck

